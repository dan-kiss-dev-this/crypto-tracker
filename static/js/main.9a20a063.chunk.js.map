{"version":3,"sources":["components/ChartComponent.jsx","components/NewsComponent.jsx","components/ApiComponent.jsx","components/App.js","components/serviceWorker.js","index.js","images/logo.svg"],"names":["CandleStickChart","_this$props","this","props","type","width","data","ratio","xAccessor","d","Date","time","xExtents","last","length","react_default","a","createElement","es","height","margin","left","right","top","bottom","seriesName","displayXAccessor","xScale","scaleTime","id","yExtents","high","low","axes","axisAt","orient","ticks","series","timeIntervalBarWidth","utcDay","React","Component","defaultProps","fitWidth","NewsComponent","fullData","news","bundle_default","count","className","map","singleNews","index","obj","key","href","url","title","src","urlToImage","alt","description","article","connect","state","navBar","ApiComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","apiData","coinSelected","coin","newsData","e","setState","target","value","fetchData","dispatch","fetchNews","site","fetch","response","ok","json","alert","console","error","_context3","t0","_context4","_this2","log","undefined","Data","onChange","handleChange","helper","ChartComponent","components_NewsComponent","logo","rel","store","createStore","arguments","action","newCoin","articles","App","react_redux_es","components_ApiComponent","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9a20a063.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { scaleTime } from \"d3-scale\";\nimport { utcDay } from \"d3-time\";\n\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { CandlestickSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last, timeIntervalBarWidth } from \"react-stockcharts/lib/utils\";\n\nclass CandleStickChart extends React.Component {\n    render() {\n        const { type, width, data, ratio } = this.props;\n        const xAccessor = d => new Date(d.time*1000);\n        const xExtents = [\n            xAccessor(last(data)),\n            xAccessor(data[data.length - 30])\n        ];\n\t\treturn (\n            xExtents.length <= 1 ? <p>User Reload Page</p> :\n\t\t\t<ChartCanvas height={300}\n\t\t\t    ratio={ratio}\n\t\t\t\t\t width={width}\n\t\t\t\t\t margin={{ left: 50, right: 50, top: 10, bottom: 30 }}\n\t\t\t\t\t type={type}\n\t\t\t\t\tseriesName=\"MSFT\"\n\t\t\t\t\tdata={data}\n\t\t\t\t\txAccessor={xAccessor}\n\t\t\t\t\tdisplayXAccessor={xAccessor}\n\t\t\t\t\txScale={scaleTime()}\n                     xExtents={xExtents}\n                     >\n\n\t\t\t\t<Chart id={1} yExtents={d => [d.high, d.low]}>\n\t\t\t\t\t<XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={6}/>\n\t\t\t\t\t<YAxis axisAt=\"left\" orient=\"left\" ticks={5} />\n\t\t\t\t\t<CandlestickSeries width={timeIntervalBarWidth(utcDay)}/>\n\t\t\t\t</Chart> \n\t\t\t </ChartCanvas> \n\t\t);\n\t}\n}\n\nCandleStickChart.propTypes = {\n\tdata: PropTypes.array.isRequired,\n\twidth: PropTypes.number.isRequired,\n\tratio: PropTypes.number.isRequired,\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n};\n\nCandleStickChart.defaultProps = {\n\ttype: \"svg\",\n};\nCandleStickChart = fitWidth(CandleStickChart);\n\nexport default CandleStickChart;\n\n","import React from 'react';\nimport '../css/App.css';\nimport Skeleton from 'react-loading-skeleton';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n    return {\n        fullData: state\n    };\n};\n\nconst article = (obj, index) => <div key={index} className=\"Article\">\n        <a href={obj.url}>\n            <h4>{obj.title}</h4>\n            <div><img src={obj.urlToImage} alt=\"Pic\"/></div>\n            <p href={obj.url} className=\"Article-Text\">{obj.description}...(click for more)</p>\n        </a>        \n    </div>;\n\n\nclass NewsComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                {this.props.fullData.news === null ? \n                    <h1><Skeleton count={11} height={70}/></h1> \n                    :\n                    <div className=\"Articles\">\n                        {this.props.fullData.news.map((singleNews, index) => \n                            article(singleNews, index)\n                        )};\n                    </div>\n                }\n            </div>       \n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(NewsComponent);\n\n","import React from 'react';\nimport CandleStickChart from './ChartComponent';\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\nimport logo from '../images/logo.svg';\nimport '../css/App.css';\nimport Skeleton from 'react-loading-skeleton';\nimport NewsComponent from './NewsComponent';\n\nimport { connect } from 'react-redux'; //we import the connect method from react-redux\n\n//It's useful, but not necessary, to define your action types as variables and reference them when you define your actions\nconst CHANGE_COIN = \"CHANGE_COIN\";\nconst GET_NEWS = \"GET_NEWS\";\n\nconst change_coin = newCoin => {\n    return {\n        type: CHANGE_COIN,\n        value: newCoin\n    };\n};\n\nconst get_news = news => {\n    return {\n        type: GET_NEWS,\n        value: news\n    }\n}\n\nconst navBar = <div className=\"navBar\">\n        <h1>CryptoLive</h1>\n        <div>\n            <a href=\"https://github.com/dan-kiss-dev-this\">Charts</a>\n            <a href=\"https://github.com/dan-kiss-dev-this\">News</a>\n            <a href=\"https://github.com/dan-kiss-dev-this\">About</a>\n        </div>\n    </div>;\n\n//we define the mapStateToProps function where we will pass in to the connect method further down\n//We assign the entire state here to the fullData property \nconst mapStateToProps = state => {\n    return {\n        fullData: state\n    };\n};\n\n//we aren't using mapDispatchToProps as we don't need it in this basic example\n//const mapDispatchToProps = state => {\n//    return{}; \n//};\n\nclass ApiComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            apiData: {},\n            coinSelected: this.props.fullData.coin,\n            newsData: {},\n        }\n    }\n\n    async handleChange (e) {\n        await this.setState({\n            coinSelected: e.target.value\n        });\n        await this.fetchData();\n        await this.props.dispatch(change_coin(this.state.coinSelected));\n    };\n\n    async componentDidMount() {\n        await this.fetchNews();\n        this.fetchData();\n    }\n\n    async fetchData() {\n        const coin = this.state.coinSelected;\n        const site = `https://min-api.cryptocompare.com/data/histoday?fsym=${coin}&tsym=USD&limit=30&api_key={42fe264b1c5770a241062077c69f096b9548e03d7b37b634e9fc2c736d33ec98}`;\n        let response = await fetch(site);\n        try {\n            if (response.ok) {\n                let apiData = await response.json()\n                this.setState({\n                    apiData,\n                });\n            }\n        } catch (error) {\n            alert('Error occured reload page');\n            console.error(error);\n        }\n    }\n\n    async fetchNews() {\n        const site = 'https://newsapi.org/v2/everything?sources=crypto-coins-news&apiKey=be6a84f3238641c2b3eb13361beffc88';\n        let response = await fetch(site)\n        try {\n            if (response.ok) {\n                let newsData = await response.json();\n                await this.setState({\n                    newsData,\n                });\n                await this.props.dispatch(get_news(this.state.newsData));\n            }\n        } catch (error) {\n            alert('Error occured reload page');\n            console.error(error);\n        }\n    }\n\n    render() {\n        console.log('state', this.state,' props', this.props);\n        return (\n            this.state.apiData.Data !== undefined ?\n                <div>\n                    {navBar}\n                    <div className=\"Chart-main\">\n                        <h4>Select Coin:\n                            <select onChange={e => {\n                                this.handleChange(e); \n                            }}>\n                                <option value='BTC'>Bitcoin</option>\n                                <option value='ETH'>Ethereum</option>\n                                <option value='XRP'>Ripple</option>\n                                <option value='LTC'>Litecoin</option>\n                                <option value='USDT'>Tether</option>\n                                <option value='XLM'>Stellar</option>\n                                <option value='XMR'>Monero</option>\n                            </select>\n                        </h4>\n                        <TypeChooser >\n                            {type => <CandleStickChart type={type} data={this.state.apiData.Data} />}\n                        </TypeChooser>\n                    </div>\n                    <NewsComponent />\n                </div>\n                :\n                <div className=\"App\">\n                    <h1><Skeleton count={1} height={70}/></h1>\n                    <div className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <a\n                            className=\"App-link\"\n                            href=\"https://github.com/dan-kiss-dev-this/crypto-tracker\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Loading...\n                        </a>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    null\n)(ApiComponent)\n\n","import React, { Component } from 'react';\nimport ApiComponent from './ApiComponent';\nimport { Provider } from 'react-redux';\nimport {createStore } from 'redux';\nimport '../css/App.css';\n\n//We define the reducer here so that we can pass it in when we create the store\nconst coinReducer = (state = {coin: 'BTC', news: null}, action) => {\n  switch (action.type) {\n    case \"CHANGE_COIN\":\n    let newCoin = action.value;\n    state.coin = newCoin;\n    return state;\n    case \"GET_NEWS\":\n    let news = action.value\n    state.news = news.articles\n    return state;\n    default:\n    // if you wanted to destructure state into an array = [...state];\n      return state;\n  }\n}\n\n//We instantiate the store by calling the createStore method we imported and passing in the reducer we defined\nconst store = createStore(coinReducer);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n            <ApiComponent />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './components/serviceWorker';\nimport {} from 'dotenv/config';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}